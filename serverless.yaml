service: meal-bot

# frameworkVersion: '2'

plugins:
  - serverless-python-requirements
  - serverless-apigateway-service-proxy
  - serverless-step-functions
custom:
  botToken: ${opt:token}
  region: ap-southeast-1
  basePath: function
  memorySize: 512
  pythonRequirements:
    useStaticCache: false
  apiGatewayServiceProxies:
    - sqs:
        path: /webhook
        method: post
        queueName: { 'Fn::GetAtt': ['messageQueue', 'QueueName'] }
        request:
          template:
            application/json: |-
              Action=SendMessage&MessageBody=$input.body

provider:
  name: aws
  runtime: python3.7
  lambdaHashingVersion: 20201221
  region: ${self:custom.region}
  memorySize: ${self:custom.memorySize}

package:
  individually: true
  exclude:
    - "**/*"

functions:
  controller:
    module: ${self:custom.basePath}/controller
    handler: controller.lambda_handler
    timeout: 60
    environment:
      API_BOT_TOKEN: ${self:custom.botToken}
      COGNITO_AUTHORIZATION_URL: <callback url>
      # STEP_FUNCTION_ARN: { 'Fn::GetAtt': ['FeedbackLambdaFunction', 'Arn'] }
      LOGIN_FUNCTION_ARN: { 'Fn::GetAtt': ['LoginLambdaFunction', 'Arn'] }
      GET_MENU_FUNCTION_ARN: { 'Fn::GetAtt': ['GetMenuLambdaFunction', 'Arn'] }
      UPLOAD_MENU_FUNCTION_ARN: { 'Fn::GetAtt': ['UploadMenuLambdaFunction', 'Arn'] }
    role: controllerRole
    events:
          - sqs:
              batchSize: 10
              arn:
                Fn::GetAtt:
                  - messageQueue
                  - Arn
    package:
      include:      
        - ${self:custom.basePath}/controller/controller.py
        - ${self:custom.basePath}/controller/keyboards.py

  feedback:
    module: ${self:custom.basePath}/feedback
    handler: feedback.lambda_handler
    timeout: 30
    role: defaultRole
    package:
      include:      
        - ${self:custom.basePath}/feedback/feedback.py

  getMenu:
    module: ${self:custom.basePath}/get_menu
    handler: get_menu.lambda_handler
    timeout: 30
    role: menuRole
    package:
      include:      
        - ${self:custom.basePath}/get_menu/get_menu.py

  login:
    module: ${self:custom.basePath}/login
    handler: login.lambda_handler
    timeout: 30
    role: loginRole
    package:
      include:      
        - ${self:custom.basePath}/login/login.py

  uploadMenu:
    module: ${self:custom.basePath}/upload_menu
    handler: upload_menu.lambda_handler
    timeout: 30
    role: menuRole
    package:
      include:      
        - ${self:custom.basePath}/upload_menu/upload_menu.py

resources:
  Resources:
    messageQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "telegram-message-queue"
        VisibilityTimeout: 90
        MessageRetentionPeriod: 300
    menuTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: MenuTable
        AttributeDefinitions:
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: date
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    loginSessionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: LoginSessionTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    defaultRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-default-lambda-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: lambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'

    controllerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-controller-lambda-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: lambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - sqs:ReceiveMessage
                    - sqs:DeleteMessage
                    - sqs:GetQueueAttributes
                  Resource:
                    - { 'Fn::GetAtt': ['messageQueue', 'Arn'] }
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    - { 'Fn::GetAtt': ['LoginLambdaFunction', 'Arn'] }
                    - { 'Fn::GetAtt': ['GetMenuLambdaFunction', 'Arn'] }
                    - { 'Fn::GetAtt': ['UploadMenuLambdaFunction', 'Arn'] }
                # - Effect: Allow
                #   Action:
                #     - ssm:GetParameter
                #   Resource:
                #     - { 'Fn::GetAtt': ['BotTokenParameterStore', 'Arn'] }
                # - Effect: Allow
                #   Action:
                #     - states:StartExecution
                #     - states:StartSyncExecution
                #   Resource:
                #     - { 'Fn::GetAtt': ['StepFunctionStateMachine', 'Arn'] }

    menuRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-menu-lambda-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: lambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:BatchGetItem
                    - dynamodb:GetItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:BatchWriteItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource: { 'Fn::GetAtt': ['menuTable', 'Arn'] }

    loginRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-login-lambda-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: lambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                      - ':'
                      -
                        - 'arn:aws:logs'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - cognito-identity:GetCredentialsForIdentity
                  Resource: "*"